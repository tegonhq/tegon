datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

model Action {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name         String
  description  String?
  slug         String
  integrations String[]

  status  ActionStatus
  version String

  triggerVersion String

  // We store the config of the action
  config Json

  // This is used to store inputs or some data needed for the action 
  data Json?

  cron         String?
  workspace    Workspace?     @relation(fields: [workspaceId], references: [id])
  workspaceId  String?
  actionEntity ActionEntity[]

  createdById String
}

model ActionEntity {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  type   String
  entity String

  action   Action @relation(fields: [actionId], references: [id])
  actionId String

  @@unique([type, entity, actionId])
}

model ActionEvent {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  eventType String
  modelName String // Issue
  modelId   String // Issue ID
  eventData Json? // Update data change

  sequenceId BigInt

  processed    Boolean   @default(false)
  processedAt  DateTime?
  processedIds String[]

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

model Attachment {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  fileName       String?
  originalName   String
  fileType       String
  fileExt        String
  size           Int
  url            String?
  status         AttachmentStatus
  sourceMetadata Json?

  uploadedBy   User?      @relation(fields: [uploadedById], references: [id])
  uploadedById String?
  workspace    Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId  String?
}

model AIRequest {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  modelName   String
  data        String
  response    String?
  llmModel    String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  successful Boolean @default(false)
}

model Emoji {
  id        String     @id @default(uuid())
  name      String
  reactions Reaction[]

  @@unique([name])
}

model IntegrationAccount {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  integrationConfiguration Json
  // Unique Identifier for each connected app or personal account
  accountId                String?
  settings                 Json?
  isActive                 Boolean @default(true)
  personal                 Boolean @default(false)

  integratedBy            User                    @relation(references: [id], fields: [integratedById])
  integratedById          String
  integrationDefinition   IntegrationDefinitionV2 @relation(references: [id], fields: [integrationDefinitionId])
  integrationDefinitionId String
  workspace               Workspace               @relation(references: [id], fields: [workspaceId])
  workspaceId             String

  @@unique([accountId, integrationDefinitionId, workspaceId])
}

model IntegrationDefinitionV2 {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name         String     @unique
  slug         String
  description  String
  icon         String
  clientId     String 
  clientSecret String 
  config       Json?
  workspace    Workspace? @relation(references: [id], fields: [workspaceId])
  workspaceId  String?

  IntegrationAccount IntegrationAccount[]
}

model Invite {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  sentAt      DateTime
  expiresAt   DateTime
  emailId     String
  fullName    String
  workspaceId String
  status      InviteStatus
  teamIds     String[]
  role        Role

  @@unique([emailId, workspaceId])
}

model Issue {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  title             String
  number            Int
  description       String?
  priority          Int?
  dueDate           DateTime?
  sortOrder         Int?
  subIssueSortOrder Int?
  estimate          Int?
  sourceMetadata    Json?
  isBidirectional   Boolean?

  team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  createdById String?
  updatedById String?

  subscriberIds String[]
  assigneeId    String?
  labelIds      String[]
  stateId       String
  parent        Issue?   @relation("Report", fields: [parentId], references: [id])
  parentId      String?
  subIssue      Issue[]  @relation("Report")
  attachments   String[]

  comments       IssueComment[]
  history        IssueHistory[]
  linkedIssue    LinkedIssue[]
  issueRelations IssueRelation[]

  IssueSuggestion   IssueSuggestion? @relation(fields: [issueSuggestionId], references: [id])
  issueSuggestionId String?          @unique

  @@unique([teamId, number])
}

model IssueComment {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  body           String
  sourceMetadata Json?

  userId      String?
  updatedById String?

  reactions     Reaction[]
  reactionsData Json[]
  issue         Issue         @relation(fields: [issueId], references: [id])
  issueId       String
  parent        IssueComment? @relation("Report", fields: [parentId], references: [id])
  parentId      String?
  attachments   String[]

  replies       IssueComment[]  @relation("Report")
  linkedComment LinkedComment[]
}

model IssueHistory {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  userId         String?
  issue          Issue   @relation(fields: [issueId], references: [id])
  issueId        String
  sourceMetaData Json?

  addedLabelIds   String[]
  removedLabelIds String[]
  fromPriority    Int?
  toPriority      Int?
  fromStateId     String?
  toStateId       String?
  fromEstimate    Int?
  toEstimate      Int?
  fromAssigneeId  String?
  toAssigneeId    String?
  fromParentId    String?
  toParentId      String?
  fromTeamId      String?
  toTeamId        String?
  relationChanges Json?
}

model IssueRelation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  issue          Issue             @relation(references: [id], fields: [issueId])
  issueId        String
  relatedIssueId String
  type           IssueRelationType
  metadata       Json?

  createdById String?

  deletedById String?
  deleted     DateTime?

  @@unique([issueId, relatedIssueId, type])
}

model IssueSuggestion {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  issueId             String   @unique
  suggestedLabelIds   String[]
  suggestedAssigneeId String?
  metadata            Json?
  issue               Issue?
}

model PersonalAccessToken {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name   String
  jwt    String
  token  String
  userId String
  type   String @default("user")

  @@unique([name, userId, token])
}

model Label {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name        String
  color       String
  description String?

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  team        Team?     @relation(fields: [teamId], references: [id])
  teamId      String?
  group       Label?    @relation("Group", fields: [groupId], references: [id])
  groupId     String?
  labels      Label[]   @relation("Group")

  @@unique([name, workspaceId])
}

model LinkedComment {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  url         String
  sourceId    String
  sourceData  Json?
  createdById String?

  comment   IssueComment @relation(fields: [commentId], references: [id])
  commentId String

  @@unique([url])
}

model LinkedIssue {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  url         String
  sourceId    String?
  sourceData  Json?
  createdById String?
  updatedById String?

  issue   Issue  @relation(fields: [issueId], references: [id])
  issueId String

  @@unique([url])
}

model Notification {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  type           NotificationActionType
  userId         String
  issueId        String?
  actionData     Json?
  createdById    String?
  sourceMetadata Json?

  readAt       DateTime?
  snoozedUntil DateTime?

  workspaceId String
}

model Prompt {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name        String
  prompt      String
  model       LLMModels @default(GPT35TURBO)
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@unique([name, workspaceId])
}

model Reaction {
  id        String    @id @default(uuid())
  reactedAt DateTime  @default(now())
  deleted   DateTime?

  userId String

  comment   IssueComment @relation(fields: [commentId], references: [id])
  commentId String
  emoji     Emoji        @relation(fields: [emojiId], references: [id])
  emojiId   String

  @@unique([emojiId, commentId, userId])
}

model SyncAction {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  modelName  ModelName
  modelId    String
  action     ActionType
  sequenceId BigInt

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@unique([modelId, action])
}

model Team {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name       String
  identifier String
  icon       String?

  workspace      Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId    String
  issue          Issue[]
  label          Label[]
  template       Template[]
  workflow       Workflow[]
  teamPreference TeamPreference[]
  View           View[]

  @@unique([name, identifier, workspaceId])
}

model TeamPreference {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  team   Team?  @relation(fields: [teamId], references: [id])
  teamId String

  preference Preference
  value      String

  @@unique([teamId, preference])
}

model Template {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name         String
  category     TemplateCategory
  templateData Json

  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  team        Team?     @relation(fields: [teamId], references: [id])
  teamId      String?
}

model User {
  id String @id @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique

  fullname                String?
  username                String
  initialSetupComplete    Boolean @default(false)
  anonymousDataCollection Boolean @default(false)

  usersOnWorkspaces  UsersOnWorkspaces[]
  template           Template[]
  integrationAccount IntegrationAccount[]
  attachment         Attachment[]
}

model UsersOnWorkspaces {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user                    User      @relation(fields: [userId], references: [id])
  workspace               Workspace @relation(fields: [workspaceId], references: [id])
  userId                  String
  workspaceId             String
  teamIds                 String[]
  status                  Status    @default(ACTIVE)
  externalAccountMappings Json?
  role                    Role      @default(ADMIN)
  joinedAt                DateTime?

  @@unique([userId, workspaceId])
}

model View {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id])

  name        String
  description String

  filters      Json
  isBookmarked Boolean @default(false)

  createdById String
}

model Workflow {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name     String
  position Int
  color    String
  category WorkflowCategory

  team   Team?  @relation(fields: [teamId], references: [id])
  teamId String
}

model Workspace {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name         String
  slug         String  @unique
  icon         String?

  actionsEnabled Boolean @default(false)

  usersOnWorkspaces     UsersOnWorkspaces[]
  team                  Team[]
  label                 Label[]
  template              Template[]
  syncAction            SyncAction[]
  integrationAccount    IntegrationAccount[]
  integrationDefinition IntegrationDefinitionV2[]
  attachments           Attachment[]
  View                  View[]
  aiRequests            AIRequest[]
  prompts               Prompt[]
  action                Action[]

  ActionEvent ActionEvent[]
}

enum Preference {
  ISSUE_ESTIMATES
  PRIORITIES
}

enum Role {
  ADMIN
  USER
  BOT
  AGENT
}

enum Status {
  INVITED
  ACTIVE
  SUSPENDED
}

enum ActionStatus {
  DEPLOYING
  ERRORED
  INSTALLED
  NEEDS_CONFIGURATION
  ACTIVE
  SUSPENDED
}

enum ModelName {
  Action
  ActionEntity
  Attachment
  AIRequest
  Emoji
  IntegrationAccount
  IntegrationDefinition
  IntegrationDefinitionV2
  Invite
  Issue
  IssueComment
  IssueHistory
  IssueRelation
  IssueSuggestion
  Label
  LinkedComment
  LinkedIssue
  Notification
  Prompt
  Reaction
  SyncAction
  Team
  TeamPreference
  Template
  TriggerProject
  User
  UsersOnWorkspaces
  View
  Workflow
  Workspace
  WorkspaceTriggerProject
}

enum ActionType {
  I
  U
  D
}

enum WorkflowCategory {
  TRIAGE
  BACKLOG
  UNSTARTED
  STARTED
  COMPLETED
  CANCELED
}

enum TemplateCategory {
  ISSUE
  PROJECT
  DOCUMENT
}

enum IssueRelationType {
  BLOCKS
  BLOCKED
  RELATED
  DUPLICATE
  DUPLICATE_OF
  SIMILAR
}

enum NotificationActionType {
  IssueAssigned
  IssueUnAssigned
  IssueStatusChanged
  IssuePriorityChanged
  IssueNewComment
  IssueBlocks
}

enum AttachmentStatus {
  Pending
  Failed
  Uploaded
  Deleted
  External
}

enum InviteStatus {
  INVITED
  ACCEPTED
  DECLINED
}

enum LLMModels {
  GPT35TURBO
  GPT4TURBO
  LLAMA3
  CLAUDEOPUS
  GPT4O
}
