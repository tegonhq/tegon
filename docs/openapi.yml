openapi: 3.0.0
info:
  title: Tegon
  description: AI First Project Management Tool
  version: 0.3.8

servers:
  - url: https://app.tegon.ai

paths:
  /api/v1/action/{slug}/run:
    post:
      summary: Run an action
      description: Runs an action with the specified slug and payload
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
    requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunAction"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Action

  /api/v1/action/{slug}/inputs:
    post:
      summary: Update action inputs
      description: Updates the inputs of an action with the specified slug
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateActionInputsDto"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Action

  /api/v1/ai_requests:
    post:
      summary: Get AI request
      description: Sends a request to the AI system and returns the response
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetAIRequestDTO"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Ai_requests

  /api/v1/ai_requests/stream:
    post:
      summary: Get AI request stream
      description: Sends a request to the AI system and returns a stream of responses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetAIRequestDTO"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AIStreamResponse"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Ai_requests

  /api/v1/integration_account/{integrationAccountId}:
    get:
      summary: Get integration accounts by integration account ID
      parameters:
        - name: integrationAccountId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IntegrationAccount"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Integration_account

  /api/v1/integration_account/accountId:
    get:
      summary: Get integration accounts by account ID
      parameters:
        - name: accountId
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IntegrationAccount"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Integration_account

  /api/v1/integration_definition/{integrationDefinitionId}:
    get:
      summary: Get integration definition by ID
      parameters:
        - name: integrationDefinitionId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationDefinition"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Integration_definition

  /api/v1/integration_definition:
    get:
      summary: Get integration definitions by workspace ID
      parameters:
        - name: workspaceId
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IntegrationDefinition"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Integration_definition

  /api/v1/issue_comments:
    post:
      summary: Create an issue comment
      parameters:
        - name: issueId
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIssueCommentDto"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueComment"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Issue_comments

  /api/v1/issue_comments/linked_comment:
    post:
      summary: Create a linked comment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLinkedIssueCommentDto"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkedComment"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Issue_comments

  # /api/v1/issue_comments/linked_comment:
  #   get:
  #     summary: Get linked comment
  #     parameters:
  #       - in: query
  #         name: sourceId
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       "200":
  #         description: Successful response
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/LinkedComment"
  #       "400":
  #         description: Invalid request parameters
  #       "401":
  #         description: Unauthorized
  #       "422":
  #         description: Unprocessable Entity
  #     tags:
  #       - Issue_comments

  /api/v1/issue_comments/{issueCommentId}:
    get:
      summary: Get issue comment
      parameters:
        - in: path
          name: issueCommentId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueComment"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Issue_comments

    post:
      summary: Update issue comment
      parameters:
        - in: path
          name: issueCommentId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateIssueCommentDto"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueComment"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Issue_comments

  /api/v1/issue_relation/{issueRelationId}:
    delete:
      summary: Delete issue relation
      parameters:
        - in: path
          name: issueRelationId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueRelation"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Issue_relation

  /api/v1/issues:
    post:
      summary: Create issue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateIssueDto"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issue"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Issue

  /api/v1/issues/{issueId}:
    post:
      summary: Update issue
      parameters:
        - in: path
          name: issueId
          required: true
          schema:
            type: string
        - in: query
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateIssueDto"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issue"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Issue

    delete:
      summary: Delete issue
      parameters:
        - in: path
          name: issueId
          required: true
          schema:
            type: string
        - in: query
          name: teamId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issue"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Issue

  /api/v1/issues/filter:
    post:
      summary: Get issues by filter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetIssuesByFilterDTO"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Issue"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Issue

  /api/v1/issues/{issueId}/move:
    post:
      summary: Move issue to team
      parameters:
        - in: path
          name: issueId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamRequestParamsDto"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issue"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Issue

  /api/v1/labels:
    get:
      summary: Get labels
      parameters:
        - in: query
          name: workspaceId
          required: true
          schema:
            type: string
        - in: query
          name: teamId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Label"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Labels

    post:
      summary: Create label
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLabelDto"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Label"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Labels

  /api/v1/labels/{labelId}:
    post:
      summary: Update label
      parameters:
        - in: path
          name: labelId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLabelDto"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Label"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Labels

    delete:
      summary: Delete label
      parameters:
        - in: path
          name: labelId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Label"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Labels

  /api/v1/issues/{issueId}/link:
    post:
      summary: Create linked issue
      parameters:
        - in: path
          name: issueId
          required: true
          schema:
            type: string
        - in: query
          name: teamId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLinkedIssueDto"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkedIssue"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Issue

  /api/v1/linked_issues/{linkedIssueId}:
    get:
      summary: Get linked issue by ID
      parameters:
        - in: path
          name: linkedIssueId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkedIssue"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Linked_issue

    post:
      summary: Update linked issue by ID
      parameters:
        - in: path
          name: linkedIssueId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLinkedIssueDto"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkedIssue"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Linked_issue

    delete:
      summary: Delete linked issue
      parameters:
        - in: path
          name: linkedIssueId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkedIssue"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Linked_issue

  /api/v1/linked_issues/source:
    get:
      summary: Get linked issue by source ID
      parameters:
        - in: query
          name: sourceId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkedIssue"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Linked_issue

  /api/v1/linked_issues/source/{sourceId}:
    get:
      summary: Get personal access tokens (PATs)
      parameters:
        - in: path
          name: sourceId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pat"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Linked_issue

    post:
      summary: Update linked issue by source ID
      parameters:
        - in: path
          name: sourceId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLinkedIssueDto"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LinkedIssue"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Linked_issue

  /api/v1/users/pat:
    post:
      summary: Create personal access token (PAT)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePatDto"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Users

  /api/v1/users/pats/{patId}:
    delete:
      summary: Delete personal access token (PAT)
      parameters:
        - in: path
          name: patId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Users

  /api/v1/users:
    get:
      summary: Get user
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Users

    post:
      summary: Get users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetUsersDto"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PublicUser"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Users

  /api/v1/views/{viewId}:
    get:
      summary: Get view
      parameters:
        - in: path
          name: viewId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/View"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Users

  /api/v1/{teamId}/workflows:
    get:
      summary: Get workflows
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Workflow"
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized
        "422":
          description: Unprocessable Entity
      tags:
        - Teams

components:
  schemas:
    RunAction:
      type: object
      properties:
        workspaceId:
          type: string
        payload:
          type: object
      required:
        - workspaceId
        - payload

    UpdateActionInputsDto:
      type: object
      properties:
        inputs:
          type: object
          # Define the inputs schema if applicable
      required:
        - inputs

    GetAIRequestDTO:
      type: object
      properties:
        messages:
          type: array
          items:
            type: object
        model:
          type: string
        workspaceId:
          type: string
        llmModel:
          type: string
      required:
        - messages
        - model
        - workspaceId
        - llmModel

    AIStreamResponse:
      type: object
      properties:
        textStream:
          type: string
          format: binary
          description: AsyncIterable<string> & ReadableStream<string>

    IntegrationAccount:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deleted:
          type: string
          format: date-time
          nullable: true
        integrationConfiguration:
          type: object
          nullable: true
        accountId:
          type: string
          nullable: true
        settings:
          type: object
          nullable: true
        personal:
          type: boolean
        isActive:
          type: boolean
        integratedBy:
          $ref: "#/components/schemas/User"
        integratedById:
          type: string
        integrationDefinition:
          $ref: "#/components/schemas/IntegrationDefinition"
        integrationDefinitionId:
          type: string
        workspace:
          $ref: "#/components/schemas/Workspace"
        workspaceId:
          type: string

    IntegrationDefinition:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deleted:
          type: string
          format: date-time
          nullable: true
        name:
          type: string
        slug:
          type: string
        description:
          type: string
        icon:
          type: string
        spec:
          $ref: "#/components/schemas/Spec"
        clientId:
          type: string
        clientSecret:
          type: string
        workspace:
          $ref: "#/components/schemas/Workspace"
        workspaceId:
          type: string
          nullable: true
        IntegrationAccount:
          type: array
          items:
            $ref: "#/components/schemas/IntegrationAccount"

    Spec:
      type: object
      properties:
        workspace_auth:
          type: object
          properties:
            OAuth2:
              $ref: "#/components/schemas/OAuth2Params"
        personal_auth:
          type: object
          properties:
            OAuth2:
              $ref: "#/components/schemas/OAuth2Params"
        other_data:
          type: object
          # Define properties based on the actual JsonObject type

    OAuth2Params:
      type: object
      properties:
        authorization_url:
          type: string
        authorization_params:
          type: object
          # Define properties based on the actual Record<string, string> type
        default_scopes:
          type: array
          items:
            type: string
        scope_separator:
          type: string
        token_url:
          type: string
        token_params:
          type: object
          # Define properties based on the actual Record<string, string> type
        redirect_uri_metadata:
          type: array
          items:
            type: string
        token_response_metadata:
          type: array
          items:
            type: string
        token_expiration_buffer:
          type: integer
        scopes:
          type: array
          items:
            type: string

    Workspace:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deleted:
          type: string
          format: date-time
          nullable: true
        name:
          type: string
        slug:
          type: string
        icon:
          type: string
          nullable: true
        actionsEnabled:
          type: boolean
        usersOnWorkspaces:
          type: array
          items:
            $ref: "#/components/schemas/UsersOnWorkspaces"
        team:
          type: array
          items:
            $ref: "#/components/schemas/Team"
        label:
          type: array
          items:
            $ref: "#/components/schemas/Label"
        template:
          type: array
          items:
            $ref: "#/components/schemas/Template"
        syncAction:
          type: array
          items:
            $ref: "#/components/schemas/SyncAction"
        integrationAccount:
          type: array
          items:
            $ref: "#/components/schemas/IntegrationAccount"
        integrationDefinition:
          type: array
          items:
            $ref: "#/components/schemas/IntegrationDefinition"
        View:
          type: array
          items:
            $ref: "#/components/schemas/View"
        aiRequests:
          type: array
          items:
            $ref: "#/components/schemas/AIRequest"
        prompts:
          type: array
          items:
            $ref: "#/components/schemas/Prompt"

    UsersOnWorkspaces:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        user:
          $ref: "#/components/schemas/User"
        workspace:
          $ref: "#/components/schemas/Workspace"
        userId:
          type: string
        workspaceId:
          type: string
        teamIds:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [ACTIVE, INACTIVE, INVITED]
        externalAccountMappings:
          type: object
          nullable: true
          # Define properties based on the actual JsonValue type
        role:
          type: string
          enum: [ADMIN, MEMBER, GUEST]
        joinedAt:
          type: string
          format: date-time
          nullable: true

    Team:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deleted:
          type: string
          format: date-time
          nullable: true
        name:
          type: string
        identifier:
          type: string
        icon:
          type: string
          nullable: true
        workspace:
          $ref: "#/components/schemas/Workspace"
        workspaceId:
          type: string
        issue:
          type: array
          items:
            $ref: "#/components/schemas/Issue"
        label:
          type: array
          items:
            $ref: "#/components/schemas/Label"
        template:
          type: array
          items:
            $ref: "#/components/schemas/Template"
        workflow:
          type: array
          items:
            $ref: "#/components/schemas/Workflow"
        teamPreference:
          type: array
          items:
            $ref: "#/components/schemas/TeamPreference"
        View:
          type: array
          items:
            $ref: "#/components/schemas/View"

    Template:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deleted:
          type: string
          format: date-time
          nullable: true
        name:
          type: string
        category:
          type: string
          enum: [ISSUE, COMMENT]
        templateData:
          type: object
          # Define properties based on the actual JsonValue type
        createdBy:
          $ref: "#/components/schemas/User"
        createdById:
          type: string
        workspace:
          $ref: "#/components/schemas/Workspace"
        workspaceId:
          type: string
        team:
          $ref: "#/components/schemas/Team"
          nullable: true
        teamId:
          type: string
          nullable: true

    SyncAction:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deleted:
          type: string
          format: date-time
          nullable: true
        modelName:
          type: string
          enum:
            [
              ISSUE,
              ISSUE_COMMENT,
              ISSUE_RELATION,
              LABEL,
              LINKED_ISSUE,
              TEAM,
              TEMPLATE,
              USER,
              VIEW,
              WORKFLOW,
              WORKSPACE,
            ]
        modelId:
          type: string
        action:
          type: string
          enum: [CREATE, UPDATE, DELETE]
        sequenceId:
          type: integer
          format: int64
        workspace:
          $ref: "#/components/schemas/Workspace"
        workspaceId:
          type: string

    AIRequest:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deleted:
          type: string
          format: date-time
          nullable: true
        modelName:
          type: string
        data:
          type: string
        response:
          type: string
          nullable: true
        llmModel:
          type: string
        workspace:
          $ref: "#/components/schemas/Workspace"
        workspaceId:
          type: string
        successful:
          type: boolean

    Prompt:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deleted:
          type: string
          format: date-time
          nullable: true
        name:
          type: string
        prompt:
          type: string
        model:
          type: string
          enum: [GPT35TURBO, GPT4TURBO, LLAMA3, CLAUDEOPUS, GPT4O]
        workspace:
          $ref: "#/components/schemas/Workspace"
        workspaceId:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        email:
          type: string
        fullname:
          type: string
          nullable: true
        username:
          type: string
        initialSetupComplete:
          type: boolean
        anonymousDataCollection:
          type: boolean
        usersOnWorkspaces:
          type: array
          items:
            $ref: "#/components/schemas/UsersOnWorkspaces"
        template:
          type: array
          items:
            $ref: "#/components/schemas/Template"
        createdBy:
          type: array
          items:
            $ref: "#/components/schemas/Issue"
        integrationAccount:
          type: array
          items:
            $ref: "#/components/schemas/IntegrationAccount"
        attachment:
          type: array
          items:
            $ref: "#/components/schemas/Attachment"

    IntegrationAccountIdDto:
      type: object
      properties:
        integrationAccountId:
          type: string
      required:
        - integrationAccountId

    AccountIdDto:
      type: object
      properties:
        accountId:
          type: string
      required:
        - accountId

    IntegrationDefinitionIdDto:
      type: object
      properties:
        integrationDefinitionId:
          type: string
      required:
        - integrationDefinitionId

    WorkspaceRequestParamsDto:
      type: object
      properties:
        workspaceId:
          type: string
      required:
        - workspaceId

    CreateIssueCommentDto:
      type: object
      properties:
        body:
          type: string
        parentId:
          type: string
        linkCommentMetadata:
          type: object
        sourceMetadata:
          type: object

    IssueComment:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deleted:
          type: string
          format: date-time
          nullable: true
        body:
          type: string
        userId:
          type: string
          nullable: true
        updatedById:
          type: string
        sourceMetadata:
          type: object
          nullable: true
        reactionsData:
          type: array
          items:
            type: object
        issueId:
          type: string
        parentId:
          type: string
          nullable: true
        attachments:
          type: array
          items:
            type: string

    Issue:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deleted:
          type: string
          format: date-time
          nullable: true
        title:
          type: string
        number:
          type: integer
        description:
          type: string
          nullable: true
        priority:
          type: integer
          nullable: true
        dueDate:
          type: string
          format: date-time
          nullable: true
        sortOrder:
          type: integer
          nullable: true
        subIssueSortOrder:
          type: integer
          nullable: true
        estimate:
          type: integer
          nullable: true
        sourceMetadata:
          type: object
          nullable: true
        isBidirectional:
          type: boolean
          nullable: true
        teamId:
          type: string
        createdById:
          type: string
          nullable: true
        updatedById:
          type: string
        subscriberIds:
          type: array
          items:
            type: string
        assigneeId:
          type: string
          nullable: true
        labelIds:
          type: array
          items:
            type: string
        stateId:
          type: string
        parentId:
          type: string
          nullable: true
        attachments:
          type: array
          items:
            type: string
        issueSuggestionId:
          type: string
          nullable: true

    LinkedComment:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deleted:
          type: string
          format: date-time
          nullable: true
        url:
          type: string
        sourceId:
          type: string
        sourceData:
          type: object
          nullable: true
        createdById:
          type: string
          nullable: true
        commentId:
          type: string

    CreateLinkedIssueCommentDto:
      type: object
      properties:
        url:
          type: string
        sourceId:
          type: string
        commentId:
          type: string
        sourceData:
          type: object

    GetLinkedCommentDto:
      type: object
      required:
        - sourceId
      properties:
        sourceId:
          type: string

    IssueCommentRequestParamsDto:
      type: object
      required:
        - issueCommentId
      properties:
        issueCommentId:
          type: string

    UpdateIssueCommentDto:
      type: object
      properties:
        body:
          type: string
        parentId:
          type: string
        linkCommentMetadata:
          type: object
        sourceMetadata:
          type: object

    IssueRelationIdRequestDto:
      type: object
      required:
        - issueRelationId
      properties:
        issueRelationId:
          type: string

    IssueRelation:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        issue:
          $ref: "#/components/schemas/Issue"
        issueId:
          type: string
        relatedIssueId:
          type: string
        type:
          type: string
        metadata:
          type: object
        createdById:
          type: string
        deletedById:
          type: string
        deleted:
          type: string
          format: date-time

    CreateIssueDto:
      type: object
      required:
        - title
        - description
        - stateId
        - teamId
      properties:
        title:
          type: string
        description:
          type: string
        priority:
          type: number
        dueDate:
          type: string
        sortOrder:
          type: number
        estimate:
          type: number
        subIssueSortOrder:
          type: number
        labelIds:
          type: array
          items:
            type: string
        assigneeId:
          type: string
        stateId:
          type: string
        parentId:
          type: string
        subscriberIds:
          type: array
          items:
            type: string
        teamId:
          type: string
        linkIssue:
          $ref: "#/components/schemas/LinkIssueDto"
        issueRelation:
          $ref: "#/components/schemas/CreateIssueRelationDto"
        attachments:
          type: array
          items:
            type: string
        subIssues:
          type: array
          items:
            $ref: "#/components/schemas/CreateIssueDto"
        linkIssueData:
          $ref: "#/components/schemas/CreateLinkedIssueDto"
        sourceMetadata:
          type: object
          additionalProperties:
            type: string

    LinkIssueDto:
      type: object
      properties:
        url:
          type: string
        title:
          type: string

    CreateLinkedIssueDto:
      type: object
      properties:
        url:
          type: string
        sourceId:
          type: string
        sourceData:
          type: object
          additionalProperties:
            type: string

    CreateIssueRelationDto:
      type: object
      required:
        - type
        - issueId
        - relatedIssueId
      properties:
        type:
          type: string
        issueId:
          type: string
        relatedIssueId:
          type: string

    IssueRequestParamsDto:
      type: object
      required:
        - issueId
      properties:
        issueId:
          type: string

    TeamRequestParamsDto:
      type: object
      required:
        - teamId
      properties:
        teamId:
          type: string

    GetIssuesByFilterDTO:
      type: object
      required:
        - filters
        - workspaceId
      properties:
        filters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/FilterValue"
        workspaceId:
          type: string

    FilterValue:
      type: object
      required:
        - filterType
      properties:
        value:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        filterType:
          $ref: "#/components/schemas/FilterTypeEnum"

    FilterTypeEnum:
      type: string
      enum:
        - IS
        - IS_NOT
        - INCLUDES
        - EXCLUDES
        - UNDEFINED
        - LTE
        - LT
        - GTE
        - GT

    FilterKeyEnum:
      type: string
      enum:
        - label
        - status
        - assignee
        - priority
        - dueDate
        - updatedAt
        - createdAt

    BooleanFilterKeyEnum:
      type: string
      enum:
        - isBlocked
        - isBlocking
        - isDuplicate
        - isDuplicateOf
        - isRelated
        - isParent
        - isSubIssue

    UpdateIssueDto:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        priority:
          type: number
        dueDate:
          type: string
        sortOrder:
          type: number
        subIssueSortOrder:
          type: number
        estimate:
          type: number
        labelIds:
          type: array
          items:
            type: string
        assigneeId:
          type: string
        stateId:
          type: string
        parentId:
          type: string
        isBidirectional:
          type: boolean
        subscriberIds:
          type: array
          items:
            type: string
        issueRelation:
          $ref: "#/components/schemas/CreateIssueRelationDto"
        attachments:
          type: array
          items:
            type: string
        userId:
          type: string
        linkIssueData:
          $ref: "#/components/schemas/CreateLinkedIssueDto"
        sourceMetadata:
          type: object
          additionalProperties:
            type: string

    CreateLabelDto:
      type: object
      required:
        - name
        - color
        - workspaceId
      properties:
        name:
          type: string
        color:
          type: string
        description:
          type: string
        groupId:
          type: string
        workspaceId:
          type: string
        teamId:
          type: string

    Label:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deleted:
          type: string
          format: date-time
          nullable: true
        name:
          type: string
        color:
          type: string
        description:
          type: string
          nullable: true
        workspaceId:
          type: string
        teamId:
          type: string
          nullable: true
        groupId:
          type: string
          nullable: true

    LabelRequestParamsDto:
      type: object
      required:
        - labelId
      properties:
        labelId:
          type: string

    GetLabelsDTO:
      type: object
      required:
        - workspaceId
        - teamId
      properties:
        workspaceId:
          type: string
        teamId:
          type: string

    UpdateLabelDto:
      type: object
      properties:
        name:
          type: string
        color:
          type: string
        description:
          type: string
        groupId:
          type: string

    LinkedIssue:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deleted:
          type: string
          format: date-time
          nullable: true
        url:
          type: string
        sourceId:
          type: string
          nullable: true
        sourceData:
          type: object
          additionalProperties: true
        createdById:
          type: string
          nullable: true
        updatedById:
          type: string
        issueId:
          type: string

    UpdateLinkedIssueDto:
      type: object
      properties:
        url:
          type: string
        sourceId:
          type: string
        title:
          type: string
        sourceData:
          type: object
          additionalProperties:
            type: string
        createdById:
          type: string

    CreatePatDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string

    Pat:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        name:
          type: string
        jwt:
          type: string
        token:
          type: string
        userId:
          type: string

    GetUsersDto:
      type: object
      required:
        - userIds
      properties:
        userIds:
          type: array
          items:
            type: string
        workspaceId:
          type: string

    PublicUser:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        fullname:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [ADMIN, MEMBER, GUEST]

    View:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deleted:
          type: string
          format: date-time
          nullable: true
        workspaceId:
          type: string
        workspace:
          type: object
          # Define properties based on the actual Workspace type
        teamId:
          type: string
          nullable: true
        team:
          type: object
          nullable: true
          # Define properties based on the actual Team type
        name:
          type: string
        description:
          type: string
        filters:
          type: object
          # Define properties based on the actual filters type
        isBookmarked:
          type: boolean
        createdById:
          type: string

    Workflow:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deleted:
          type: string
          format: date-time
          nullable: true
        name:
          type: string
        position:
          type: integer
        color:
          type: string
        category:
          type: string
          enum: [TRIAGE, BACKLOG, UNSTARTED, STARTED, COMPLETED, CANCELED]
        team:
          type: object
          nullable: true
          # Define properties based on the actual Team type
        teamId:
          type: string
          nullable: true

    TeamPreference:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deleted:
          type: string
          format: date-time
          nullable: true
        team:
          $ref: "#/components/schemas/Team"
          nullable: true
        teamId:
          type: string
          nullable: true
        preference:
          type: string
          enum: [ISSUE_ESTIMATES, PRIORITIES]
        value:
          type: string

    Attachment:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deleted:
          type: string
          format: date-time
          nullable: true
        fileName:
          type: string
          nullable: true
        originalName:
          type: string
        fileType:
          type: string
        fileExt:
          type: string
        size:
          type: integer
        url:
          type: string
          nullable: true
        status:
          type: string
          enum: [Pending, Failed, Uploaded, Deleted, External]
        sourceMetadata:
          type: object
          nullable: true
          # Define properties based on the actual JsonValue type
        uploadedBy:
          $ref: "#/components/schemas/User"
          nullable: true
        uploadedById:
          type: string
          nullable: true
        workspace:
          $ref: "#/components/schemas/Workspace"
          nullable: true
        workspaceId:
          type: string
          nullable: true

  responses:
    ErrorResponse:
      description: Error response
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string

    UnauthorizedResponse:
      description: Unauthorized response
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Unauthorized

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

security:
  - BearerAuth: []
