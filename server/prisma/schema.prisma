datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// TODO (harshith): Need to fix enum array in swagger
generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/@@generated"
  outputToNestJsResourceStructure = "true"
  exportRelationModifierClasses   = "true"
  reExport                        = "true"
  entityPrefix                    = ""
  entitySuffix                    = ""
  fileNamingStyle                 = "camel"
}

model User {
  id String @id @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique

  fullname                String?
  username                String
  role                    Role
  initialSetupComplete    Boolean @default(false)
  anonymousDataCollection Boolean @default(false)

  usersOnWorkspaces  UsersOnWorkspaces[]
  template           Template[]
  createdBy          Issue[]
  integrationAccount IntegrationAccount[]
}

model Workspace {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name String
  slug String  @unique
  icon String?

  usersOnWorkspaces     UsersOnWorkspaces[]
  team                  Team[]
  label                 Label[]
  template              Template[]
  syncAction            SyncAction[]
  integrationAccount    IntegrationAccount[]
  integrationDefinition IntegrationDefinition[]
}

model UsersOnWorkspaces {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user                    User      @relation(fields: [userId], references: [id])
  workspace               Workspace @relation(fields: [workspaceId], references: [id])
  userId                  String
  workspaceId             String
  teamIds                 String[]
  status                  Status    @default(ACTIVE)
  externalAccountMappings Json?

  @@unique([userId, workspaceId])
}

model Team {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name       String
  identifier String
  icon       String?

  workspace      Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId    String
  issue          Issue[]
  label          Label[]
  template       Template[]
  workflow       Workflow[]
  teamPreference TeamPreference[]

  @@unique([name, identifier, workspaceId])
}

model Label {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name        String
  color       String
  description String?

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  team        Team?     @relation(fields: [teamId], references: [id])
  teamId      String?
  group       Label?    @relation("Group", fields: [groupId], references: [id])
  groupId     String?
  labels      Label[]   @relation("Group")

  @@unique([name, workspaceId])
}

model Template {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name         String
  category     TemplateCategory
  templateData Json

  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  team        Team?     @relation(fields: [teamId], references: [id])
  teamId      String?
}

model Workflow {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name     String
  position Int
  color    String
  category WorkflowCategory

  team   Team?  @relation(fields: [teamId], references: [id])
  teamId String
}

model TeamPreference {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  team   Team?  @relation(fields: [teamId], references: [id])
  teamId String

  preference Preference
  value      String

  @@unique([teamId, preference])
}

model SyncAction {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  modelName  ModelName
  modelId    String
  action     ActionType
  sequenceId BigInt

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@unique([modelId, action])
}

model Issue {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  title             String
  number            Int
  description       String?
  priority          Int?
  dueDate           DateTime?
  sortOrder         Int?
  subIssueSortOrder Int?
  estimate          Int?
  sourceMetadata    Json?
  isBidirectional   Boolean?

  team          Team     @relation(fields: [teamId], references: [id])
  teamId        String
  createdBy     User?    @relation(fields: [createdById], references: [id])
  createdById   String?
  subscriberIds String[]
  assigneeId    String?
  labelIds      String[]
  stateId       String
  parent        Issue?   @relation("Report", fields: [parentId], references: [id])
  parentId      String?
  subIssue      Issue[]  @relation("Report")

  comments       IssueComment[]
  history        IssueHistory[]
  linkedIssue    LinkedIssue[]
  issueRelations IssueRelation[]

  @@unique([teamId, number])
}

model LinkedIssue {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  url         String
  sourceId    String?
  source      Json?
  sourceData  Json?
  createdById String?

  issue   Issue  @relation(fields: [issueId], references: [id])
  issueId String

  @@unique([url])
}

model IssueComment {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  body           String
  userId         String?
  sourceMetadata Json?

  reactions     Reaction[]
  reactionsData Json[]
  issue         Issue         @relation(fields: [issueId], references: [id])
  issueId       String
  parent        IssueComment? @relation("Report", fields: [parentId], references: [id])
  parentId      String?

  replies       IssueComment[]  @relation("Report")
  linkedComment LinkedComment[]
}

model LinkedComment {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  url         String
  sourceId    String
  source      Json?
  sourceData  Json?
  createdById String?

  comment   IssueComment @relation(fields: [commentId], references: [id])
  commentId String

  @@unique([url])
}

model Reaction {
  id        String    @id @default(uuid())
  reactedAt DateTime  @default(now())
  deleted   DateTime?

  userId String

  comment   IssueComment @relation(fields: [commentId], references: [id])
  commentId String
  emoji     Emoji        @relation(fields: [emojiId], references: [id])
  emojiId   String

  @@unique([emojiId, commentId, userId])
}

model Emoji {
  id        String     @id @default(uuid())
  name      String
  reactions Reaction[]

  @@unique([name])
}

model IssueHistory {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  userId         String?
  issue          Issue   @relation(fields: [issueId], references: [id])
  issueId        String
  sourceMetaData Json?

  addedLabelIds   String[]
  removedLabelIds String[]
  fromPriority    Int?
  toPriority      Int?
  fromStateId     String?
  toStateId       String?
  fromEstimate    Int?
  toEstimate      Int?
  fromAssigneeId  String?
  toAssigneeId    String?
  fromParentId    String?
  toParentId      String?
  relationChanges Json?
}

model IssueRelation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  issue          Issue             @relation(references: [id], fields: [issueId])
  issueId        String
  relatedIssueId String
  type           IssueRelationType

  createdById String

  deletedById String?
  deleted     DateTime?

  @@unique([issueId, relatedIssueId, type])
}

model IntegrationDefinition {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  name         IntegrationName
  icon         String
  spec         Json
  clientId     String
  clientSecret String
  scopes       String
  workspace    Workspace       @relation(references: [id], fields: [workspaceId])
  workspaceId  String

  IntegrationAccount IntegrationAccount[]
}

model IntegrationAccount {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  integrationConfiguration Json
  // Unique Identifier for each connected app or personal account
  accountId                String?
  settings                 Json?
  isActive                 Boolean @default(true)

  integratedBy            User                  @relation(references: [id], fields: [integratedById])
  integratedById          String
  integrationDefinition   IntegrationDefinition @relation(references: [id], fields: [integrationDefinitionId])
  integrationDefinitionId String
  workspace               Workspace             @relation(references: [id], fields: [workspaceId])
  workspaceId             String

  @@unique([accountId, integrationDefinitionId, workspaceId])
}

model Notification {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   DateTime?

  type           NotificationActionType
  userId         String
  issueId        String?
  actionData     Json?
  createdById    String?
  sourceMetadata Json?

  readAt       DateTime?
  snoozedUntil DateTime?

  workspaceId String
}

enum Preference {
  ISSUE_ESTIMATES
  PRIORITIES
}

enum Role {
  ADMIN
  USER
}

enum Status {
  ACTIVE
  SUSPENDED
}

enum ModelName {
  Workspace
  Team
  TeamPreference
  Issue
  Label
  Workflow
  Template
  IssueComment
  IssueHistory
  UsersOnWorkspaces
  IntegrationDefinition
  IntegrationAccount
  LinkedIssue
  IssueRelation
  Notification
}

enum ActionType {
  I
  U
  D
}

enum WorkflowCategory {
  TRIAGE
  BACKLOG
  UNSTARTED
  STARTED
  COMPLETED
  CANCELED
}

enum TemplateCategory {
  ISSUE
  PROJECT
  DOCUMENT
}

enum IntegrationName {
  Github
  GithubPersonal
  Slack
  SlackPersonal
}

enum IssueRelationType {
  BLOCKS
  BLOCKED
  RELATED
  DUPLICATE
  DUPLICATE_OF
}

enum NotificationActionType {
  IssueAssigned
  IssueUnAssigned
  IssueStatusChanged
  IssuePriorityChanged
  IssueNewComment
  IssueBlocks
}
